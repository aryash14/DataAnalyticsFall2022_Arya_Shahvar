library(datasets)  # Load built-in datasets
head(iris)         # Show the first six lines of iris data
head(iris)         # Show the first six lines of iris data
summary(iris)      # Summary statistics for iris data
plot(iris)         # Scatterplot matrix for iris data
# Clear packages
detach("package:datasets", unload = TRUE)  # For base
# Clear plots
dev.off()  # But only if there IS a plot
library(datasets)  # Load built-in datasets
head(iris)         # Show the first six lines of iris data
plot(iris)         # Scatterplot matrix for iris data
# Clear packages
detach("package:datasets", unload = TRUE)  # For base
# Clear plots
dev.off()  # But only if there IS a plot
# Clear console
cat("\014")  # ctrl+L
# I recommend "pacman" for managing add-on packages. It will
# install packages, if needed, and then load the packages.
install.packages("pacman")
# Then load the package by using either of the following:
require(pacman)  # Gives a confirmation message.
library(pacman)  # No message.
library(pacman)  # No message.
# Or, by using "pacman::p_load" you can use the p_load
# function from pacman without actually loading pacman.
# These are packages I load every time.
pacman::p_load(pacman, dplyr, GGally, ggplot2, ggthemes,
ggvis, httr, lubridate, plotly, rio, rmarkdown, shiny,
stringr, tidyr)
library(datasets)  # Load/unload base packages manually
# Clear packages
p_unload(dplyr, tidyr, stringr) # Clear specific packages
p_unload(all)  # Easier: clears all add-ons
detach("package:datasets", unload = TRUE)  # For base
# Clear console
cat("\014")  # ctrl+L
man::p_load(pacman, dplyr, GGally, ggplot2, ggthemes,
ggvis, httr, lubridate, plotly, rio, rmarkdown, shiny,
stringr, tidyr)
# Then load the package by using either of the following:
require(pacman)  # Gives a confirmation message.
# Or, by using "pacman::p_load" you can use the p_load
# function from pacman without actually loading pacman.
# These are packages I load every time.
pacman::p_load(pacman, dplyr, GGally, ggplot2, ggthemes,
ggvis, httr, lubridate, plotly, rio, rmarkdown, shiny,
stringr, tidyr)
p_unload(all)  # Easier: clears all add-ons
detach("package:datasets", unload = TRUE)  # For base
library(datasets)  # Load/unload base packages manually
head(iris)
?plot  # Help for plot()
plot(iris$Species)  # Categorical variable
plot(iris$Petal.Length)  # Quantitative variable
plot(iris$Species, iris$Petal.Width)  # Cat x quant
plot(iris$Petal.Length, iris$Petal.Width)  # Quant pair
plot(iris)  # Entire data frame
# Plot with options
plot(iris$Petal.Length, iris$Petal.Width,
col = "#cc0000",  # Hex code for datalab.cc red
pch = 19,         # Use solid circles for points
main = "Iris: Petal Length vs. Petal Width",
xlab = "Petal Length",
ylab = "Petal Width")
plot(cos, 0, 2*pi)
plot(exp, 1, 5)
plot(dnorm, -3, +3)
# Formula plot with options
plot(dnorm, -3, +3,
col = "#cc0000",
lwd = 5,
main = "Standard Normal Distribution",
xlab = "z-scores",
ylab = "Density")
# Clear packages
detach("package:datasets", unload = TRUE)
# Clear plots
dev.off()  # But only if there IS a plot
# Clear console
cat("\014")  # ctrl+L
?mtcars
library(datasets)
?mtcars
head(mtcars)
# installing a package
install.packages("MASS")
#load a library
library("MASS")
# attach to memory
attach(Boston)
#data description
?Boston
# show the first 6 rows
head(Boston)
#get the dimension of the dataset
dim(Boston)
nrow(Boston)
# column names
names(Boston)
#showing the structure of the dataset
str(Boston)
# number of cols
ncol(Boston)
#summary() function shows the summary statistics
summary(Boston)
#choose a specific column
Boston$crim
# summary of a specific column
summary(Boston$tax)
library(ISLR)
install.packages("ISLR")
library(ISLR)
data("Auto")
head(Auto)
head(ISRL)
head(ISLR)
?ISLR
sumary(Auto$mpg)
summary(Auto$mpg)
fivenum(Auto$mpg)
# histogram
hist(Auto$mpg)
mean(Auto$msg)
mean(Auto$weight)
median(Auto$horsepower)
help("read.csv")
data1 <- read.csv(file.choose(), header = TRUE)
data1 <- read.csv(file.choose(), header = TRUE)
data1 <- read.csv(file.choose(), header = TRUE)
head(data1)
View(data1)
dim(data1)
getwd()
if(!require("ISLR")) {
install.packages("ISLR")
library(ISLR)
}
data("Auto")
head(Auto)
head(Auto)
summary(Auto$mpg)
#same as sumary without the header
fivenum(Auto$mpg)
# histogram
hist(Auto$mpg)
# Exercise1: Regression
data <- read.csv("./dataset_multipleRegression.csv")
attach(data)
str(data)
library(gdata)
#alternate
library("xlsx")
bronx1<-read.xlsx("./rollingsales_bronx.xls",pattern="BOROUGH",stringsAsFactors=FALSE,sheetIndex=1,startRow=5,header=TRUE)
library(gdata)
#alternate
library("xlsx")
bronx1<-read.xlsx("./rollingsales_bronx.xls",pattern="BOROUGH",stringsAsFactors=FALSE,sheetIndex=1,startRow=5,header=TRUE)
setwd("~/Documents/GitHub/DataAnalytics_Arya_Shahvar/group_2/lab")
bronx1<-read.xlsx("./rollingsales_bronx.xls",pattern="BOROUGH",stringsAsFactors=FALSE,sheetIndex=1,startRow=5,header=TRUE)
View(bronx1)
str(bronx1)
#
attach(bronx1) # If you choose to attach, leave out the "data=." in lm regression
help("sub")
SALE.PRICE<-sub("$","",SALE.PRICE)
SALE.PRICE<-as.numeric(gsub(",","", SALE.PRICE))
GROSS.SQUARE.FEET<-as.numeric(gsub(",","", GROSS.SQUARE.FEET))
LAND.SQUARE.FEET<-as.numeric(gsub(",","", LAND.SQUARE.FEET))
plot(log(GROSS.SQUARE.FEET), log(SALE.PRICE))
is.na(SALE.PRICE)
SALE.PRICE[is.na(bronx1$SALE.PRICE) | bronx1$SALE.PRICE == "Inf" | bronx1$SALE.PRIVE <= 0 ]
SALE.PRICE[is.na(bronx1$SALE.PRICE)]
SALE.PRICE[is.na(bronx1$SALE.PRICE) | bronx1$SALE.PRICE == "Inf" | bronx1$SALE.PRIVE == 0 ]
SALE.PRICE[bronx1$SALE.PRIVE == 0 ]
which(SALE.PRICE == NA)
which(is.na(SALE.PRICE)
which(is.na(SALE.PRICE))
which(SALE.PRICE == 0)
which(SALE.PRICE < 0)
which(SALE.PRICE == "Inf")
plot(log(GROSS.SQUARE.FEET), log(SALE.PRICE))
# SALE.PRICE[is.na(bronx1$SALE.PRICE) | bronx1$SALE.PRICE == "Inf" | bronx1$SALE.PRIVE <= 0 ]
bronx1$SALE.PRICE <- replace(SALE.PRICE, 0, 0.1)
# bronx1$GROSS.SQUARE.FEET <- replace(GROSS.SQUARE.FEET, NaN, 0)
# SALE.PRICE[is.na(bronx1$SALE.PRICE) | bronx1$SALE.PRICE == "Inf" | bronx1$SALE.PRIVE <= 0 ] <- 0
# bronx1$GROSS.SQUARE.FEET[is.na(bronx1$GROSS.SQUARE.FEET) | bronx1$GROSS.SQUARE.FEET == "Inf"] <- NA
plot(log(GROSS.SQUARE.FEET), log(SALE.PRICE))
m1<-lm(log(SALE.PRICE)~log(GROSS.SQUARE.FEET), na.action= na.exclude)
# SALE.PRICE[is.na(bronx1$SALE.PRICE) | bronx1$SALE.PRICE == "Inf" | bronx1$SALE.PRIVE <= 0 ]
bronx1$SALE.PRICE <- replace(SALE.PRICE, 0, 5)
# bronx1$GROSS.SQUARE.FEET <- replace(GROSS.SQUARE.FEET, NaN, 0)
# SALE.PRICE[is.na(bronx1$SALE.PRICE) | bronx1$SALE.PRICE == "Inf" | bronx1$SALE.PRIVE <= 0 ] <- 0
# bronx1$GROSS.SQUARE.FEET[is.na(bronx1$GROSS.SQUARE.FEET) | bronx1$GROSS.SQUARE.FEET == "Inf"] <- NA
plot(log(GROSS.SQUARE.FEET), log(SALE.PRICE))
m1<-lm(log(SALE.PRICE)~log(GROSS.SQUARE.FEET), na.action= na.exclude)
# SALE.PRICE[is.na(bronx1$SALE.PRICE) | bronx1$SALE.PRICE == "Inf" | bronx1$SALE.PRIVE <= 0 ]
bronx1$SALE.PRICE <- replace(SALE.PRICE, SALE.PRICE == 0, 5)
# bronx1$GROSS.SQUARE.FEET <- replace(GROSS.SQUARE.FEET, NaN, 0)
# SALE.PRICE[is.na(bronx1$SALE.PRICE) | bronx1$SALE.PRICE == "Inf" | bronx1$SALE.PRIVE <= 0 ] <- 0
# bronx1$GROSS.SQUARE.FEET[is.na(bronx1$GROSS.SQUARE.FEET) | bronx1$GROSS.SQUARE.FEET == "Inf"] <- NA
plot(log(GROSS.SQUARE.FEET), log(SALE.PRICE))
m1<-lm(log(SALE.PRICE)~log(GROSS.SQUARE.FEET), na.action= na.exclude)
# SALE.PRICE[is.na(bronx1$SALE.PRICE) | bronx1$SALE.PRICE == "Inf" | bronx1$SALE.PRIVE <= 0 ]
bronx1$SALE.PRICE <- replace(bronx1$SALE.PRICE, bronx1$SALE.PRICE == 0, 5)
# bronx1$GROSS.SQUARE.FEET <- replace(GROSS.SQUARE.FEET, NaN, 0)
# SALE.PRICE[is.na(bronx1$SALE.PRICE) | bronx1$SALE.PRICE == "Inf" | bronx1$SALE.PRIVE <= 0 ] <- 0
# bronx1$GROSS.SQUARE.FEET[is.na(bronx1$GROSS.SQUARE.FEET) | bronx1$GROSS.SQUARE.FEET == "Inf"] <- NA
plot(log(GROSS.SQUARE.FEET), log(SALE.PRICE))
m1<-lm(log(SALE.PRICE)~log(GROSS.SQUARE.FEET), na.action= na.exclude)
m1<-lm(log(bronx1$SALE.PRICE)~log(GROSS.SQUARE.FEET), na.action= na.exclude)
# SALE.PRICE[is.na(bronx1$SALE.PRICE) | bronx1$SALE.PRICE == "Inf" | bronx1$SALE.PRIVE <= 0 ]
# bronx1$SALE.PRICE <- replace(bronx1$SALE.PRICE, bronx1$SALE.PRICE == 0, 5)
# bronx1$GROSS.SQUARE.FEET <- replace(GROSS.SQUARE.FEET, NaN, 0)
# SALE.PRICE[is.na(bronx1$SALE.PRICE) | bronx1$SALE.PRICE == "Inf" | bronx1$SALE.PRIVE <= 0 ] <- 0
# bronx1$GROSS.SQUARE.FEET[is.na(bronx1$GROSS.SQUARE.FEET) | bronx1$GROSS.SQUARE.FEET == "Inf"] <- NA
bronx1$SALE.PRICE[bronx1$SALE.PRICE == 0] <- 0.1
plot(log(GROSS.SQUARE.FEET), log(SALE.PRICE))
m1<-lm(log(bronx1$SALE.PRICE)~log(GROSS.SQUARE.FEET), na.action= na.exclude)
# SALE.PRICE[is.na(bronx1$SALE.PRICE) | bronx1$SALE.PRICE == "Inf" | bronx1$SALE.PRIVE <= 0 ]
# bronx1$SALE.PRICE <- replace(bronx1$SALE.PRICE, bronx1$SALE.PRICE == 0, 5)
# bronx1$GROSS.SQUARE.FEET <- replace(GROSS.SQUARE.FEET, NaN, 0)
# SALE.PRICE[is.na(bronx1$SALE.PRICE) | bronx1$SALE.PRICE == "Inf" | bronx1$SALE.PRIVE <= 0 ] <- 0
# bronx1$GROSS.SQUARE.FEET[is.na(bronx1$GROSS.SQUARE.FEET) | bronx1$GROSS.SQUARE.FEET == "Inf"] <- NA
bronx1$SALE.PRICE[bronx1$SALE.PRICE == 0] <- 5
plot(log(GROSS.SQUARE.FEET), log(SALE.PRICE))
m1<-lm(log(bronx1$SALE.PRICE)~log(GROSS.SQUARE.FEET), na.action= na.exclude)
# Exercise 2: Classification
data <- read.csv("./abalone.csv")
setwd("~/Dropbox/Data Analytics/assign2")
# Exercise 2: Classification
data <- read.csv("./abalone.csv")
attach(data)
str(data)
summary(data)
View(data)
ind <- sample(2, nrow(data), replace=TRUE, prob=c(0.7, 0.3))
KNNtrain <- data[ind==1,]
# View(KNNtrain[2:9])
KNNtest <- data[ind==2,]
sqrt(nrow(KNNtrain)) #53. -> 55
# length(unique(data$Rings))
library(class)
KNNpred <- knn(train = KNNtrain[2:8], test = KNNtest[2:8], cl = KNNtrain$Rings, k = 55)
KNNpred
table(KNNpred)
setwd("~/Documents/GitHub/DataAnalytics_Arya_Shahvar/group_2/lab")
SALE.PRICE<-sub("$","",SALE.PRICE)
SALE.PRICE<-as.numeric(gsub(",","", SALE.PRICE))
GROSS.SQUARE.FEET<-as.numeric(gsub(",","", GROSS.SQUARE.FEET))
LAND.SQUARE.FEET<-as.numeric(gsub(",","", LAND.SQUARE.FEET))
plot(log(GROSS.SQUARE.FEET), log(SALE.PRICE))
# SALE.PRICE[is.na(bronx1$SALE.PRICE) | bronx1$SALE.PRICE == "Inf" | bronx1$SALE.PRIVE <= 0 ]
# bronx1$SALE.PRICE <- replace(bronx1$SALE.PRICE, bronx1$SALE.PRICE == 0, 5)
# bronx1$GROSS.SQUARE.FEET <- replace(GROSS.SQUARE.FEET, NaN, 0)
# SALE.PRICE[is.na(bronx1$SALE.PRICE) | bronx1$SALE.PRICE == "Inf" | bronx1$SALE.PRIVE <= 0 ] <- 0
# bronx1$GROSS.SQUARE.FEET[is.na(bronx1$GROSS.SQUARE.FEET) | bronx1$GROSS.SQUARE.FEET == "Inf"] <- NA
bronx1$SALE.PRICE[log(bronx1$SALE.PRICE) == "Inf"] <- 0
plot(log(GROSS.SQUARE.FEET), log(SALE.PRICE))
m1<-lm(log(bronx1$SALE.PRICE)~log(GROSS.SQUARE.FEET), na.action= na.exclude)
# SALE.PRICE[is.na(bronx1$SALE.PRICE) | bronx1$SALE.PRICE == "Inf" | bronx1$SALE.PRIVE <= 0 ]
# bronx1$SALE.PRICE <- replace(bronx1$SALE.PRICE, bronx1$SALE.PRICE == 0, 5)
# bronx1$GROSS.SQUARE.FEET <- replace(GROSS.SQUARE.FEET, NaN, 0)
SALE.PRICE[is.na(log(bronx1$SALE.PRICE)) | log(bronx1$SALE.PRICE) == "Inf" | log(bronx1$SALE.PRIVE) < 0 ] <- 0
# SALE.PRICE[is.na(bronx1$SALE.PRICE) | bronx1$SALE.PRICE == "Inf" | bronx1$SALE.PRIVE <= 0 ]
# bronx1$SALE.PRICE <- replace(bronx1$SALE.PRICE, bronx1$SALE.PRICE == 0, 5)
# bronx1$GROSS.SQUARE.FEET <- replace(GROSS.SQUARE.FEET, NaN, 0)
SALE.PRICE[is.na(log(bronx1$SALE.PRICE)) | is.infinte(log(bronx1$SALE.PRICE)) | log(bronx1$SALE.PRIVE) < 0 ] <- 0
# SALE.PRICE[is.na(bronx1$SALE.PRICE) | bronx1$SALE.PRICE == "Inf" | bronx1$SALE.PRIVE <= 0 ]
# bronx1$SALE.PRICE <- replace(bronx1$SALE.PRICE, bronx1$SALE.PRICE == 0, 5)
# bronx1$GROSS.SQUARE.FEET <- replace(GROSS.SQUARE.FEET, NaN, 0)
SALE.PRICE[is.na(log(bronx1$SALE.PRICE)) | is.infinite(log(bronx1$SALE.PRICE)) | log(bronx1$SALE.PRIVE) < 0 ] <- 0
# bronx1$GROSS.SQUARE.FEET[is.na(bronx1$GROSS.SQUARE.FEET) | bronx1$GROSS.SQUARE.FEET == "Inf"] <- NA
bronx1$SALE.PRICE[is.infinte(log(bronx1$SALE.PRICE))] <- 0
# bronx1$GROSS.SQUARE.FEET[is.na(bronx1$GROSS.SQUARE.FEET) | bronx1$GROSS.SQUARE.FEET == "Inf"] <- NA
bronx1$SALE.PRICE[is.infinite(log(bronx1$SALE.PRICE))] <- 0
plot(log(GROSS.SQUARE.FEET), log(SALE.PRICE))
m1<-lm(log(bronx1$SALE.PRICE)~log(GROSS.SQUARE.FEET), na.action= na.exclude)
which(is.infinite(log(bronx1$SALE.PRICE)))
which(is.infinite((bronx1$SALE.PRICE)))
which(is.na(log(bronx1$SALE.PRICE)))
pairs(~ Fertility + Education + Catholic, data = swiss, subset = Education < 20, main = "Swiss data, Education < 20")
require(party)
require(party)
swiss_ctree <- ctree(Fertility ~ Agriculture + Education + Catholic, data = swiss)
library(party)
library("party")
library(party)
swiss_ctree <- ctree(Fertility ~ Agriculture + Education + Catholic, data = swiss)
plot(swiss_ctree)
pairs(~ Fertility + Education + Catholic, data = swiss, subset = Education < 20, main = "Swiss data, Education < 20")
library(party)
library(party)
pairs(~ Fertility + Education + Catholic, data = swiss, subset = Education < 20, main = "Swiss data, Education < 20")
library(party)
pairs(~ Fertility + Education + Catholic, data = swiss, subset = Education < 20, main = "Swiss data, Education < 20")
install.packages("multcomp")
library(multcomp)
install.packages("party")
install.packages("party")
library(party)
library()
install.packages("party")
library(party)
plot(swiss_ctree)
party
install.packages("partykit")
library(partykit)
swiss_ctree <- ctree(Fertility ~ Agriculture + Education + Catholic, data = swiss)
plot(swiss_ctree)
require(kknn)
data(iris)
require(class)
data(iris)
m <- dim(iris)[1]
val <- sample(1:m, size = round(m/3), replace = FALSE,
prob = rep(1/m, m))
iris.learn <- iris[-val,]
iris.valid <- iris[val,]
iris.kknn <- kknn(Species~., iris.learn, iris.valid, distance = 1,
kernel = "triangular")
iris.kknn <- knn(Species~., iris.learn, iris.valid, distance = 1,
kernel = "triangular")
iris.kknn <- knn(Species~., iris.learn, iris.valid, distance = 1, kernel = "triangular")
help("knn")
iris.kknn <- knn(Species~., iris.learn, iris.valid)
iris.kknn <- knn(iris.learn, iris.valid)
iris.kknn <- knn(iris.learn, iris.valid, cl = iris.learn$Rings)
shape(irislearn)
shape(iris.learn)
dim(iris.learn)
dim(iris.learn$Rings)
View(iris.learn)
iris.kknn <- knn(iris.learn, iris.valid, cl = iris.learn$Species)
dim(iris.learn$Species)
dim(iris.learn$Species)
View(iris.learn)
dim(iris.learn$Species)
iris.learn <- iris[-val,]
iris.valid <- iris[val,]
help("knn")
dim(iris.learn)
dim(iris.learn$Species)
help("kknn")
??kknn
??kmeans
help("kmeans")
help("kernalknn")
help("KernelKnn")
iris.kknn <- KernelKnn(Species~., iris.learn, iris.valid, distance = 1, kernel = "triangular")
library(KernelKnn)
require(kknn)
help("kknn")
??kknn
require(kknn)
package.install("kknn")
packages.install("kknn")
install.packages("kknn")
require(kknn)
data(iris)
m <- dim(iris)[1]
val <- sample(1:m, size = round(m/3), replace = FALSE,
prob = rep(1/m, m))
iris.learn <- iris[-val,]
iris.valid <- iris[val,]
iris.kknn <- kknn(Species~., iris.learn, iris.valid, distance = 1,
kernel = "triangular")
summary(iris.kknn)
fit <- fitted(iris.kknn)
table(iris.valid$Species, fit)
pcol <- as.character(as.numeric(iris.valid$Species))
pairs(iris.valid[1:4], pch = pcol, col = c("green3", "red”)[(iris.valid$Species != fit)+1])
pairs(iris.valid[1:4], pch = pcol, col = c("green3", "red")[(iris.valid$Species != fit)+1])
pairs(iris.valid[1:4], pch = pcol, col = c("green", "red")[(iris.valid$Species != fit)+1])
require(kknn)
data(ionosphere)
ionosphere.learn <- ionosphere[1:200,]
ionosphere.valid <- ionosphere[-c(1:200),]
fit.kknn <- kknn(class ~ ., ionosphere.learn, ionosphere.valid)
table(ionosphere.valid$class, fit.kknn$fit)
(fit.train1 <- train.kknn(class ~ ., ionosphere.learn, kmax = 15,
kernel = c("triangular", "rectangular", "epanechnikov", "optimal"), distance = 1))
table(predict(fit.train1, ionosphere.valid), ionosphere.valid$class)
(fit.train2 <- train.kknn(class ~ ., ionosphere.learn, kmax = 15,
kernel = c("triangular", "rectangular", "epanechnikov", "optimal"), distance = 2))
table(predict(fit.train2, ionosphere.valid), ionosphere.valid$class)
data(swiss)
pairs(~ Fertility + Education + Catholic, data = swiss, subset = Education < 20, main = "Swiss data, Education < 20")
data(ionosphere)
ionosphere.learn <- ionosphere[1:200,]
ionosphere.valid <- ionosphere[-c(1:200),]
fit.kknn <- kknn(class ~ ., ionosphere.learn, ionosphere.valid)
table(ionosphere.valid$class, fit.kknn$fit)
(fit.train1 <- train.kknn(class ~ ., ionosphere.learn, kmax = 15,
kernel = c("triangular", "rectangular", "epanechnikov", "optimal"), distance = 1))
table(predict(fit.train1, ionosphere.valid), ionosphere.valid$class)
(fit.train2 <- train.kknn(class ~ ., ionosphere.learn, kmax = 15,
kernel = c("triangular", "rectangular", "epanechnikov", "optimal"), distance = 2))
table(predict(fit.train2, ionosphere.valid), ionosphere.valid$class)
data(swiss)
sclass <- kmeans(swiss[2:6], 3)
table(sclass$cluster, swiss[,1])
View(swiss)
help("kmeans")
nyt1<-read.csv("nyt1.csv")
nyt1<-read.csv("nyt1.csv")
nyt1<-nyt1[which(nyt1$Impressions>0 & nyt1$Clicks>0 & nyt1$Age>0),]
nnyt1<-dim(nyt1)[1]		# shrink it down!
nyt1<-read.csv("nyt1.csv")
nyt1<-nyt1[which(nyt1$Impressions>0 & nyt1$Clicks>0 & nyt1$Age>0),]
dim(nnyt1)
nyt1<-read.csv("nyt1.csv")
nyt1<-nyt1[which(nyt1$Impressions>0 & nyt1$Clicks>0 & nyt1$Age>0),]
dim(nyt1)
nnyt1<-dim(nyt1)[1]		# shrink it down!
dim(nnyt1)
dim(nnyt1)
nnyt1<-dim(nyt1)[1]		# shrink it down!
dim(nnyt1)
nyt1<-read.csv("nyt1.csv")
nyt1<-nyt1[which(nyt1$Impressions>0 & nyt1$Clicks>0 & nyt1$Age>0),]
dim(nyt1)
nnyt1<-dim(nyt1)[1]		# shrink it down!
dim(nnyt1)
dim(nyt1)[1]
